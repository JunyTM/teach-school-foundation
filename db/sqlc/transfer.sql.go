// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transfer.sql

package db

import (
	"context"
)

const createTranfer = `-- name: CreateTranfer :one
INSERT INTO transfers (
    from_account_id,
    to_account_id,
    amount,
    currency
) VALUES (
    $1, $2, $3, $4
) RETURNING id, from_account_id, to_account_id, amount, currency, created_at
`

type CreateTranferParams struct {
	FromAccountID int64  `json:"from_account_id"`
	ToAccountID   int64  `json:"to_account_id"`
	Amount        int64  `json:"amount"`
	Currency      string `json:"currency"`
}

func (q *Queries) CreateTranfer(ctx context.Context, arg CreateTranferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTranfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.Currency,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTranfer = `-- name: DeleteTranfer :exec
DELETE FROM transfers WHERE id = $1
`

func (q *Queries) DeleteTranfer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTranfer, id)
	return err
}

const getTranfer = `-- name: GetTranfer :one
SELECT id, from_account_id, to_account_id, amount, currency, created_at FROM transfers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTranfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTranfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listTranfer = `-- name: ListTranfer :many
SELECT id, from_account_id, to_account_id, amount, currency, created_at FROM transfers ORDER BY id LIMIT $1 OFFSET $2
`

type ListTranferParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTranfer(ctx context.Context, arg ListTranferParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTranfer, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTranfer = `-- name: UpdateTranfer :one
UPDATE transfers SET amount = $2 WHERE id = $1 RETURNING id, from_account_id, to_account_id, amount, currency, created_at
`

type UpdateTranferParams struct {
	ID     int64 `json:"id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateTranfer(ctx context.Context, arg UpdateTranferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTranfer, arg.ID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
